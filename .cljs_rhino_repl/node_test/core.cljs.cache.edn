;; Analyzed by ClojureScript 1.7.228
{:use-macros {go-loop cljs.core.async.macros}, :excludes #{}, :name node-test.core, :imports nil, :requires {node cljs.nodejs, cljs.nodejs cljs.nodejs, cljs.core.async cljs.core.async, crawler node-test.crawler, node-test.crawler node-test.crawler}, :uses {timeout cljs.core.async, <! cljs.core.async}, :defs {log {:protocol-inline nil, :meta {:file "/home/martin/Documents/dev/clojure/trends/src/node_test/core.cljs", :line 18, :column 7, :end-line 18, :end-column 10, :arglists (quote ([& item])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(item)], :arglists ([& item]), :arglists-meta (nil)}}, :name node-test.core/log, :variadic true, :file "/home/martin/Documents/dev/clojure/trends/src/node_test/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(item)], :arglists ([& item]), :arglists-meta (nil)}, :method-params [(item)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists ([& item])}, crawl-loop {:protocol-inline nil, :meta {:file "/home/martin/Documents/dev/clojure/trends/src/node_test/core.cljs", :line 22, :column 7, :end-line 22, :end-column 17, :arglists (quote ([]))}, :name node-test.core/crawl-loop, :variadic false, :file "/home/martin/Documents/dev/clojure/trends/src/node_test/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, -main {:protocol-inline nil, :meta {:file "/home/martin/Documents/dev/clojure/trends/src/node_test/core.cljs", :line 33, :column 7, :end-line 33, :end-column 12, :arglists (quote ([]))}, :name node-test.core/-main, :variadic false, :file "/home/martin/Documents/dev/clojure/trends/src/node_test/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :recur}, :order [:recur :else]}, :doc nil}